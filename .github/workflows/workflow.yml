name: Pull Request Check # 워크플로우 이름

on: # 워크플로우 실행 트리거
  pull_request: # pull_request가 실행 될 때에만
    types: [opened, synchronize] # PR이 생성되거나 업데이트 될 때

jobs: # 작업 정의
  check:
    runs-on: ubuntu-latest # 우분투 환경
    permissions: # 권한 설정
      pull-requests: write # PR 작성 권한 설정
    steps: # 작업 단계
      - uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core'); // @actions/core 사용
            const { context, github } = require('@actions/github'); // context와 github 객체 가져오기

            async function run() {
              const pull_request = context.payload.pull_request; // pull_request 객체 가져오기

              if (pull_request === undefined) { // pull_request가 없는 경우
                core.info("This is not a pull request"); // info 로그로 변경
                return; // 종료
              }

              const body = pull_request.body;

              if (!body) {
                try {
                  // PR에 코멘트를 추가
                  await github.rest.issues.createComment({
                    owner: context.repo.owner, // 저장소 소유자
                    repo: context.repo.repo, // 저장소 이름
                    issue_number: pull_request.number, // PR 번호
                    body: "해당 PR은 가이드라인을 준수하지 않았습니다. 때문에 PR을 닫도록 하겠습니다. 가이드라인을 준수해서 다시 PR 요청을 해주세요.", // 코멘트 내용
                  });

                  // PR을 닫음
                  await github.rest.pulls.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo, // 저장소 이름
                    pull_number: pull_request.number, // PR 번호
                    state: "closed", // 상태를 닫힘으로 변경
                  });
                } catch (error) {
                  core.error("Error occurred while closing PR: " + error.message); // error 로그로 변경
                }
              }
            }

            // async 함수 실행
            run().catch((error) => core.setFailed(error.message)); // 예외 처리를 추가
